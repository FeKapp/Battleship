type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/GameMechanics.java
  visible: true
  text: |
    package battleship;

    import java.util.Scanner;

    public class GameMechanics {

        public static void shootingPhase (Grid grid) {
            Scanner scanner = new Scanner(System.in);

            System.out.println("\nThe game starts!");
            grid.printWarGrid();
            boolean validInput = false;
            boolean allShipsSunk = false;
            System.out.printf("\nTake a shot! %n");
            while (!allShipsSunk) {
                do {
                    String input = scanner.nextLine();

                    int row = input.charAt(0) - 'A';
                    int column = Integer.parseInt(input.substring(1)) - 1;

                    if (row < 0 || row > 9 || column < 0 || column > 9) {
                        System.out.printf("\nError! You entered the wrong coordinates! Try again: %n");
                        continue;
                    }

                    if (grid.isCellEmpty(row, column) || grid.isMiss(row, column)) {
                        grid.markCell(row, column, 'M');
                        grid.printWarGrid();
                        System.out.println("\nYou missed. Try again: ");
                        validInput = true;
                    } else if (grid.isShip(row, column)) {
                        grid.markCell(row, column, 'X');
                        grid.markHitOnWarShipGrid(row, column);
                        grid.incShipFeildsHit();
                        grid.printWarGrid();
                        if (grid.isShipSunk(row, column)) {
                            if (grid.isAllShipFieldsHit()) {
                                System.out.println("\nYou sank the last ship. You won. Congratulations!");
                                allShipsSunk = true;
                            } else {
                            System.out.println("\nYou sank a ship! Specify a new target: ");
                            }
                        } else {
                            System.out.println("\nYou hit a ship! Try again: ");
                        }
                        validInput = true;
                    } else if (grid.isHit(row, column)) {
                        grid.printWarGrid();
                        System.out.println("\nYou hit a ship!");
                        validInput = true;
                    } else {
                        System.out.printf("\nError! You entered the wrong coordinates! Try again: %n");
                    }
                } while (!validInput);
            }
        }

    }
  learner_created: true
- name: src/battleship/GridInputHandler.java
  visible: true
  text: |
    package battleship;

    import java.util.Scanner;

    public class GridInputHandler {
        public static void getInput(Grid grid) {
            Scanner scanner = new Scanner(System.in);
            for (Ship ship: grid.getShips()) {
                boolean validInput = false;
                String message = String.format("Enter the coordinates of the %s (%d cells): %n", ship.getName(), ship.getLength());
                grid.printGrid();
                while (!validInput) {
                    System.out.println("\n" + message);

                    String input = scanner.nextLine();
                    String[] coordinates = input.split(" ");

                    String areCoordinatesValid = areCoordinatesValid(grid, coordinates, ship);
                    if (areCoordinatesValid.equals("valid")) {
                        int[] resolvedCoordinates = resolveCoordinates(coordinates);
                        boolean isHorizontal = isHorizontal(resolvedCoordinates);
                        grid.placeShip(resolvedCoordinates[0], resolvedCoordinates[1], ship, isHorizontal);
                        validInput = true;
                    } else {
                        message = areCoordinatesValid;
                    }
                }
            }
            grid.printGrid();
        }

        public static String areCoordinatesValid (Grid grid, String[] coordinates, Ship ship) {
            int[] resolvedCoordinates = resolveCoordinates(coordinates);
            boolean isHorizontal = isHorizontal(resolvedCoordinates);

             if (isDiagonal(resolvedCoordinates)) {
                return String.format("Error! Wrong ship location! Try again: %n");
            } else if (!isShipLengthValid(resolvedCoordinates, ship.getLength())) {
                return String.format("Error! Wrong length of the " + ship.getName() + "! Try again: %n");
            } else if (!grid.hasPlaceForShip(resolvedCoordinates[0], resolvedCoordinates[1],ship.getLength(), isHorizontal) || !grid.hasEnoughSpaceToOtherShips(resolvedCoordinates[0], resolvedCoordinates[1], ship.getLength(), isHorizontal)) {
                return String.format("Error! You placed it too close to another one. Try again: %n");
            }

            return "valid";
        }

        public static int[] resolveCoordinates (String[] coordinates) {
            int[] resolvedCoordinates = new int[4];
            int rowStart = coordinates[0].charAt(0) - 'A';
            int columnStart= Integer.parseInt(coordinates[0].substring(1)) - 1;
            int rowEnd = coordinates[1].charAt(0) - 'A';
            int columnEnd = Integer.parseInt(coordinates[1].substring(1)) - 1;

            if (rowStart > rowEnd) {
                resolvedCoordinates[0] = rowEnd;
                resolvedCoordinates[2] = rowStart;
            } else {
                resolvedCoordinates[0] = rowStart;
                resolvedCoordinates[2] = rowEnd;
            }

            if (columnStart > columnEnd) {
                resolvedCoordinates[1] = columnEnd;
                resolvedCoordinates[3] = columnStart;
            } else {
                resolvedCoordinates[1] = columnStart;
                resolvedCoordinates[3] = columnEnd;
            }

            return resolvedCoordinates;
        }

        public static boolean isShipLengthValid(int[] coordinates, int length) {
            if (isHorizontal(coordinates)) {
                return coordinates[3] - coordinates[1] + 1 == length;
            } else {
                return coordinates[2] - coordinates[0] + 1 == length;
            }
        }

        public static boolean isHorizontal(int[] coordinates) {
            return coordinates[0] == coordinates[2];
        }

        public static boolean isDiagonal(int[] coordinates) {
            return coordinates[0] != coordinates[2] && coordinates[1] != coordinates[3];
        }


    }
  learner_created: true
- name: src/battleship/Grid.java
  visible: true
  text: |
    package battleship;

    public class Grid {
        int rows;
        int columns;
        char[][] grid;

        Ship[][] warShipGrid;
        Ship[] ships;

        int numberOfShipFields;
        int ShipFeildsHit;

        public Grid(int rows, int columns) {
            this.rows = rows;
            this.columns = columns;
            grid = new char[rows][columns];
            ships = new Ship[5];
            warShipGrid = new Ship[rows][columns];
            numberOfShipFields = 0;
            ShipFeildsHit = 0;
        }

        public void initGrid() {
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns ; j++) {
                    grid[i][j] = '~';
                }
            }
        }

        public void printGrid() {
            System.out.println("\n  1 2 3 4 5 6 7 8 9 10");
            for (int i = 0; i < rows; i++) {
                System.out.print((char)('A' + i) + " ");
                for (int j = 0; j < columns ; j++) {
                    System.out.print(grid[i][j] + " ");
                }
                System.out.println();
            }
        }

        public void printWarGrid() {
            System.out.println("\n  1 2 3 4 5 6 7 8 9 10");
            for (int i = 0; i < rows; i++) {
                System.out.print((char)('A' + i) + " ");
                for (int j = 0; j < columns ; j++) {
                    if (grid[i][j] == 'O') {
                        System.out.print("~ ");
                    } else {
                        System.out.print(grid[i][j] + " ");
                    }
                }
                System.out.println();
            }
        }

        public void addShip(Ship ship, int shipNumber) {
            ships[shipNumber - 1] = ship;
        }

        public void placeShip(int row, int column, Ship ship, boolean isHorizontal) {
            int length = ship.getLength();
            if (isHorizontal) {
                for (int i = 0; i < length; i++) {
                    grid[row][column + i] = 'O';
                    warShipGrid[row][column + i] = ship;
                    numberOfShipFields++;
                }
            } else {
                for (int i = 0; i < length; i++) {
                    grid[row + i][column] = 'O';
                    warShipGrid[row + i][column] = ship;
                    numberOfShipFields++;
                }
            }
        }

        public boolean hasPlaceForShip(int row, int column, int length, boolean isHorizontal) {
            try {
                if (isHorizontal) {
                    for (int i = 0; i < length; i++) {
                        if (grid[row][column + i] == 'O') {
                            return false;
                        }
                    }
                } else {
                    for (int i = 0; i < length; i++) {
                        if (grid[row + i][column] == 'O') {
                            return false;
                        }
                    }
                }
            } catch (ArrayIndexOutOfBoundsException e) {
                return false;
            }
            return true;
        }

        public boolean hasEnoughSpaceToOtherShips(int row, int column, int length, boolean isHorizontal) {
            try {
                if (isHorizontal) {
                    // Check if there is a ship above
                    if(row -1 >= 0) {
                        for (int i = 0; i < length; i++) {
                            if (grid[row - 1][column + i] == 'O') {
                                return false;
                            }
                        }
                    }
                    // Check if there is a ship below
                    if(row + 1 < rows) {
                        for (int i = 0; i < length; i++) {
                            if (grid[row + 1][column + i] == 'O') {
                                return false;
                            }
                        }
                    }
                    // Check if there i as ship on the left
                    if(column - 1 >= 0) {
                        if (grid[row][column - 1] == 'O') {
                            return false;
                        }
                        if(row - 1 >= 0) {
                            if (grid[row - 1][column - 1] == 'O') {
                                return false;
                            }
                        }
                        if(row + 1 < rows) {
                            if (grid[row + 1][column - 1] == 'O') {
                                return false;
                            }
                        }
                    }
                    // Check if there is a ship on the right
                    if(column + length < columns) {
                        if (grid[row][column + length] == 'O') {
                            return false;
                        }
                        if(row - 1 >= 0) {
                            if (grid[row - 1][column + length] == 'O') {
                                return false;
                            }
                        }
                        if(row + 1 < rows) {
                            if (grid[row + 1][column + length] == 'O') {
                                return false;
                            }
                        }
                    }
                } else {
                    // Check if there is a ship on the left
                    if(column - 1 >= 0) {
                        for (int i = 0; i < length; i++) {
                            if (grid[row + i][column - 1] == 'O') {
                                return false;
                            }
                        }
                    }
                    // Check if there is a ship on the right
                    if(column + 1 < columns) {
                        for (int i = 0; i < length; i++) {
                            if (grid[row + i][column + 1] == 'O') {
                                return false;
                            }
                        }
                    }
                    // Check if there i as ship above
                    if(row - 1 >= 0) {
                        if (grid[row - 1][column] == 'O') {
                            return false;
                        }
                        if(column - 1 >= 0) {
                            if (grid[row - 1][column - 1] == 'O') {
                                return false;
                            }
                        }
                        if(column + 1 < columns) {
                            if (grid[row - 1][column + 1] == 'O') {
                                return false;
                            }
                        }
                    }
                    // Check if there is a ship below
                    if(row + length < rows) {
                        if (grid[row + length][column] == 'O') {
                            return false;
                        }
                        if(column - 1 >= 0) {
                            if (grid[row + length][column - 1] == 'O') {
                                return false;
                            }
                        }
                        if(column + 1 < columns) {
                            if (grid[row + length][column + 1] == 'O') {
                                return false;
                            }
                        }
                    }
                }
            } catch (ArrayIndexOutOfBoundsException e) {
                return false;
            }
            return true;
        }

        public boolean isShip(int row, int column) {
            return grid[row][column] == 'O';
        }

        public boolean isHit(int row, int column) {
            return grid[row][column] == 'X';
        }

        public void markHit(int row, int column) {
            grid[row][column] = 'X';
        }

        public void markCell(int row, int column, char mark) {
            grid[row][column] = mark;
        }

        public void markHitOnWarShipGrid(int row, int column) {
            warShipGrid[row][column].hit();
        }

        public boolean isShipSunk(int row, int column) {
            return warShipGrid[row][column].isSunk();
        }

        public boolean isMiss(int row, int column) {
            return grid[row][column] == 'M';
        }

        public boolean isCellEmpty(int row, int column) {
            return grid[row][column] == '~';
        }


        public Ship[] getShips() {
            return ships;
        }

        public int getNumberOfShipFields() {
            return numberOfShipFields;
        }

        public void incShipFeildsHit() {
            ShipFeildsHit++;
        }

        public boolean isAllShipFieldsHit() {
            return ShipFeildsHit == numberOfShipFields;
        }
    }
  learner_created: true
- name: src/battleship/Ship.java
  visible: true
  text: |
    package battleship;

    public class Ship {
        private int length;
        private String name;
        private int hits;

        public Ship(int length, String name) {
            this.length = length;
            this.name = name;
        }

        public int getLength() {
            return length;
        }

        public String getName() {
            return name;
        }

        public void hit() {
            hits++;
        }

        public boolean isSunk() {
            return hits == length;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10598#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Wed, 21 Jun 2023 13:02:43 UTC"
record: -1
